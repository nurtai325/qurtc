
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;


events {
	worker_connections  1024;
}


http {
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$http_x_forwarded_for"';

	access_log  /var/log/nginx/access.log  main;
	sendfile        on;
	keepalive_timeout  65;

	limit_req_zone $binary_remote_addr zone=main_limit:10m rate=10r/s;

	map $sent_http_content_type $expires {
		default                    off;
		text/html                  epoch;
		text/css                   1w;
		application/javascript     1w;
		~image/                    max;
		~font/                     max;
	}

	server {
		server_name  qurt.tech;
		expires $expires;

		listen [::]:443 ssl ipv6only=on; # managed by Certbot
		listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/letsencrypt/live/qurt.tech/fullchain.pem; # managed by Certbot
		ssl_certificate_key /etc/letsencrypt/live/qurt.tech/privkey.pem; # managed by Certbot
		include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

		location /assets/ {
			root /usr/share/nginx/html;
			try_files $uri $uri/ =404;
			limit_req zone=main_limit burst=20;
			expires $expires;
			gzip_static on;
		}

		location /editor/ {
			root   /usr/share/nginx/html;
			index  index.html index.htm;
			limit_req zone=main_limit burst=20;
			expires $expires;
			gzip_static on;
		}

		location / {
			root   /usr/share/nginx/html;
			index  index.html index.htm;
			limit_req zone=main_limit burst=20;
			expires $expires;
			gzip_static on;
		}

		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   /usr/share/nginx/html;
			limit_req zone=main_limit burst=20;
		}
	}

	server {
		if ($host = qurt.tech) {
			return 301 https://$host$request_uri;
		} # managed by Certbot

		if ($host = qurt.lc) {
			return 301 https://$host$request_uri;
		} # managed by Certbot

		listen 80 ;
		listen [::]:80 ;
		server_name qurt.tech;
		return 404; # managed by Certbot
	}
}

